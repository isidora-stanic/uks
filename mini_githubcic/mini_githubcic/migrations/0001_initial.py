# Generated by Django 4.1.5 on 2023-01-02 14:44

from django.db import migrations, models
import django.db.models.deletion
import django.utils.timezone


class Migration(migrations.Migration):

    initial = True

    dependencies = [
    ]

    operations = [
        migrations.CreateModel(
            name='Branch',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(max_length=15)),
            ],
        ),
        migrations.CreateModel(
            name='Event',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('date_time', models.DateTimeField(default=django.utils.timezone.now)),
            ],
        ),
        migrations.CreateModel(
            name='Milestone',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('title', models.CharField(max_length=30)),
                ('description', models.CharField(max_length=120)),
                ('state', models.CharField(choices=[('OPEN', 'Open'), ('CLOSED', 'Closed'), ('MERGED', 'Merged')], default='OPEN', max_length=20)),
            ],
        ),
        migrations.CreateModel(
            name='User',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('username', models.CharField(max_length=20, unique=True)),
                ('password', models.CharField(max_length=20)),
            ],
        ),
        migrations.CreateModel(
            name='Comment',
            fields=[
                ('event_ptr', models.OneToOneField(auto_created=True, on_delete=django.db.models.deletion.CASCADE, parent_link=True, primary_key=True, serialize=False, to='mini_githubcic.event')),
                ('content', models.CharField(max_length=2000)),
                ('date_created', models.DateTimeField(default=django.utils.timezone.now)),
            ],
            bases=('mini_githubcic.event',),
        ),
        migrations.CreateModel(
            name='StateChange',
            fields=[
                ('event_ptr', models.OneToOneField(auto_created=True, on_delete=django.db.models.deletion.CASCADE, parent_link=True, primary_key=True, serialize=False, to='mini_githubcic.event')),
                ('new_state', models.CharField(max_length=20)),
            ],
            bases=('mini_githubcic.event',),
        ),
        migrations.CreateModel(
            name='UpdateEvent',
            fields=[
                ('event_ptr', models.OneToOneField(auto_created=True, on_delete=django.db.models.deletion.CASCADE, parent_link=True, primary_key=True, serialize=False, to='mini_githubcic.event')),
                ('field_name', models.CharField(max_length=20)),
                ('old_content', models.CharField(max_length=100)),
                ('new_content', models.CharField(max_length=100)),
            ],
            bases=('mini_githubcic.event',),
        ),
        migrations.CreateModel(
            name='Task',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('title', models.CharField(max_length=50)),
                ('description', models.TextField()),
                ('date_created', models.DateTimeField(default=django.utils.timezone.now)),
                ('assigned_to', models.ForeignKey(blank=True, on_delete=django.db.models.deletion.CASCADE, related_name='assigned_to', to='mini_githubcic.user')),
                ('creator', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='creator', to='mini_githubcic.user')),
            ],
        ),
        migrations.CreateModel(
            name='Project',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('title', models.CharField(max_length=20)),
                ('description', models.CharField(max_length=160)),
                ('licence', models.CharField(max_length=20)),
                ('visibility', models.CharField(choices=[('PUBLIC', 'Public'), ('PRIVATE', 'Private')], default='PRIVATE', max_length=15)),
                ('link', models.CharField(max_length=50)),
                ('developers', models.ManyToManyField(blank=True, related_name='developers', to='mini_githubcic.user')),
                ('lead', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='mini_githubcic.user')),
                ('starred', models.ManyToManyField(related_name='starred', to='mini_githubcic.user')),
            ],
        ),
        migrations.CreateModel(
            name='Label',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(max_length=100)),
                ('color', models.CharField(max_length=10)),
                ('description', models.TextField()),
                ('project', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='mini_githubcic.project')),
            ],
        ),
        migrations.AddField(
            model_name='event',
            name='task',
            field=models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='mini_githubcic.task'),
        ),
        migrations.CreateModel(
            name='Commit',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('date_time', models.DateTimeField(default=django.utils.timezone.now)),
                ('log_message', models.CharField(max_length=40)),
                ('hash', models.CharField(max_length=30)),
                ('author', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='mini_githubcic.user')),
                ('branch', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='mini_githubcic.branch')),
            ],
        ),
        migrations.AddField(
            model_name='branch',
            name='project',
            field=models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='mini_githubcic.project'),
        ),
        migrations.CreateModel(
            name='Reaction',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('user', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='mini_githubcic.user')),
                ('comment', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='mini_githubcic.comment')),
            ],
        ),
        migrations.CreateModel(
            name='PullRequest',
            fields=[
                ('task_ptr', models.OneToOneField(auto_created=True, on_delete=django.db.models.deletion.CASCADE, parent_link=True, primary_key=True, serialize=False, to='mini_githubcic.task')),
                ('source', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='source', to='mini_githubcic.branch')),
                ('target', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='target', to='mini_githubcic.branch')),
            ],
            bases=('mini_githubcic.task',),
        ),
        migrations.CreateModel(
            name='LabelApplication',
            fields=[
                ('event_ptr', models.OneToOneField(auto_created=True, on_delete=django.db.models.deletion.CASCADE, parent_link=True, primary_key=True, serialize=False, to='mini_githubcic.event')),
                ('label', models.ManyToManyField(to='mini_githubcic.label')),
            ],
            bases=('mini_githubcic.event',),
        ),
        migrations.CreateModel(
            name='Issue',
            fields=[
                ('task_ptr', models.OneToOneField(auto_created=True, on_delete=django.db.models.deletion.CASCADE, parent_link=True, primary_key=True, serialize=False, to='mini_githubcic.task')),
                ('milestone', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='mini_githubcic.milestone')),
            ],
            bases=('mini_githubcic.task',),
        ),
    ]
